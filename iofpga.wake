def scalacOpts =
  "-deprecation",
  "-feature",
  "-unchecked",
  "-language:reflectiveCalls",
  "-Xsource:2.11",
  Nil

global def nvdlaScalaModule =
  def scalaVersion = rocketchipScalaModule.getScalaModuleScalaVersion
  makeScalaModule "nvdla" "nvidia-dla-blocks" scalaVersion
  | setScalaModuleDeps (sifiveBlocksScalaModule, rocketchipScalaModule, Nil)
  | setScalaModuleScalacOptions scalacOpts
  | addMacrosParadiseCompilerPlugin

global def fpgaShellsScalaModule =
  def scalaVersion = rocketchipScalaModule.getScalaModuleScalaVersion
  makeScalaModule "fpga-shells" "fpga-shells" scalaVersion
  | setScalaModuleDeps (sifiveBlocksScalaModule, rocketchipScalaModule, Nil)
  | setScalaModuleScalacOptions scalacOpts
  | addMacrosParadiseCompilerPlugin

global def ioFPGAScalaModule =
  def scalaVersion = rocketchipScalaModule.getScalaModuleScalaVersion
  makeScalaModule "io-fpga" here scalaVersion
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleResourceDirs ("resources", Nil)
  | setScalaModuleDeps (
    nvdlaScalaModule,
    fpgaShellsScalaModule,
    sifiveBlocksScalaModule,
    rocketchipScalaModule,
    Nil
  )
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

global def ioFPGAVCU118DUTPlan =
  def name = "ioFPGAVCU118"
  def testharness = "sifive.fpgashells.shell.xilinx.VCU118Shell"
  def configs =
    "sifive.freedom.unleashed.IOFPGAConfig",
    "sifive.freedom.unleashed.With200MHz",
    Nil
  makeRocketChipDUTPlan name ioFPGAScalaModule testharness ""
  | setRocketChipDUTPlanConfigs configs

global def nvdlaLargeScalaBlock =
  def scalaModule = nvdlaScalaModule
  def config = "sifive.freedom.unleashed.WithNVDLALarge"
  makeScalaBlock scalaModule config

global def ioFPGAVCU118WithNVDLALargeDUTPlan =
  def name = "ioFPGAVCU118WithNVDLALarge"
  ioFPGAVCU118DUTPlan
  | setRocketChipDUTPlanName name
  | addRocketChipDUTPlanScalaBlock nvdlaLargeScalaBlock
